/**
 * @generated-from ./$distinct.test.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { distinct } from 'iter-tools-es';
import { wrap, unwrap } from '../../../test/helpers';

describe('distinct', () => {
  describe('when source is empty', () => {
    it('yields no values', () => {
      expect(unwrap(distinct(null))).toEqual([]);
      expect(unwrap(distinct(undefined))).toEqual([]);
      expect(unwrap(distinct(wrap([])))).toEqual([]);
    });
  });

  describe('when source has only distinct values', () => {
    it('yield those values', () => {
      expect(unwrap(distinct(wrap([1])))).toEqual([1]);
    });
  });

  describe('when source has duplicated values', () => {
    it('only yield distinct values', () => {
      expect(unwrap(distinct(wrap([1, 2, 3, 2])))).toEqual([1, 2, 3]);
    });
  });

  describe('when source has values and a selector is specified', () => {
    it('only yield distinct values based on the selector', () => {
      expect(unwrap(distinct((x) => x[0], wrap(['apple', 'apricot', 'blueberry'])))).toEqual([
        'apple',
        'blueberry',
      ]);
    });
  });
});
