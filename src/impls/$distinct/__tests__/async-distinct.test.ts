/**
 * @generated-from ./$distinct.test.ts
 * This file is autogenerated from a template. Please do not edit it directly.
 * To rebuild it from its template use the command
 * > npm run generate
 * More information can be found in CONTRIBUTING.md
 */

import { asyncDistinct } from 'iter-tools-es';
import { asyncWrap, asyncUnwrap } from '../../../test/async-helpers';

describe('asyncDistinct', () => {
  describe('when source is empty', () => {
    it('yields no values', async () => {
      expect(await asyncUnwrap(asyncDistinct(null))).toEqual([]);
      expect(await asyncUnwrap(asyncDistinct(undefined))).toEqual([]);
      expect(await asyncUnwrap(asyncDistinct(asyncWrap([])))).toEqual([]);
    });
  });

  describe('when source has only distinct values', () => {
    it('yield those values', async () => {
      expect(await asyncUnwrap(asyncDistinct(asyncWrap([1])))).toEqual([1]);
    });
  });

  describe('when source has duplicated values', () => {
    it('only yield distinct values', async () => {
      expect(await asyncUnwrap(asyncDistinct(asyncWrap([1, 2, 3, 2])))).toEqual([1, 2, 3]);
    });
  });

  describe('when source has values and a selector is specified', () => {
    it('only yield distinct values based on the selector', async () => {
      expect(
        await asyncUnwrap(asyncDistinct((x) => x[0], asyncWrap(['apple', 'apricot', 'blueberry']))),
      ).toEqual(['apple', 'blueberry']);
    });
  });
});
